Question:-
https://www.pepcoding.com/resources/online-java-foundation/binary-search-tree/tsp-bst-official/ojquestion

Code:-

#include<bits/stdc++.h>
using namespace std;


class Node {
    public:
        int data;
    Node * left;
    Node * right;

    Node(int data, Node * left, Node * right) {
        this -> data = data;
        this -> left = left;
        this -> right = right;
    }
};

class Pair {
    public:
        Node * node;
    int state;

    Pair(Node * node, int state) {
        this -> node = node;
        this -> state = state;
    }
};

Node * construct(int arr[]) {
    Node * root = new Node(arr[0], NULL, NULL);
    Pair * rtp = new Pair(root, 1);

    stack < Pair * > st;
    st.push(rtp);

    int idx = 0;
    while (st.size() > 0) {
        Pair * peek = st.top();
        if (peek -> state == 1) {
            idx++;
            if (arr[idx] != INT_MAX) {
                peek -> node -> left = new Node(arr[idx], NULL, NULL);
                Pair * lp = new Pair(peek -> node -> left, 1);
                st.push(lp);
            } else {
                peek -> node -> left = NULL;
            }

            peek -> state++;
        } else if (peek -> state == 2) {
            idx++;
            if (arr[idx] != INT_MAX) {
                peek -> node -> right = new Node(arr[idx], NULL, NULL);
                Pair * rp = new Pair(peek -> node -> right, 1);
                st.push(rp);
            } else {
                peek -> node -> right = NULL;
            }

            peek -> state++;
        } else {
            st.pop();
        }
    }

    return root;
}


void display(Node * node) {
    if (node == NULL) {
        return;
    }

    string str = "";
    str += node -> left == NULL ? "." : to_string(node -> left -> data) + "";
    str += " <- " + to_string(node -> data) + " -> ";
    str += node -> right == NULL ? "." : to_string(node -> right -> data) + "";
    cout << str << endl;

    display(node -> left);
    display(node -> right);
}
bool find(Node* node , int data){
    if(node==NULL){
        return false;
    }
    
    if(data>node->data){
        return find(node->right,data);
    }else if(data<node->data){
        return find(node->left,data);
    }else{
        return true;
    }
}
void travelAndPrint(Node* root,Node* node , int tar){
    if(node==NULL){
        return;
    }
    
    travelAndPrint(root,node->left,tar);
    int comp = tar-node->data;
    if(node->data < comp){
        if(find(root,comp)==true){
            cout<<node->data<<" "<<comp<<"\n";
        }
    }
    travelAndPrint(root,node->right,tar);
    
}

int main(){
    int num, sum;
    cin >> num;
    string a[num];
    int arr[num];
    string str;
    for(int i=0;i<num;i++){
        cin>>str;
        a[i]=str;
    }
    cin>>sum;
   for(int i=0;i<num;i++){
      if (a[i]=="n") {
            arr[i] = INT_MAX;
        } else {
            istringstream sv(a[i]);
            int val;
            sv>>val;
            arr[i] = val;
        }  
    


   }
   Node* root = construct(arr);
   travelAndPrint(root,root,sum);
    return 0;
}
