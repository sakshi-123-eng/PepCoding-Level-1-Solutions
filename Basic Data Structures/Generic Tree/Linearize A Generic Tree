Question:-
https://www.pepcoding.com/resources/online-java-foundation/generic-tree/linearize-generic-tree-official/ojquestion

Code:-

#include<bits/stdc++.h>
using namespace std;

class Node{
    public:
    int data;
    vector<Node*>children;
};

void display(Node* node){
    string str = to_string(node->data) + " -> ";
    
    for(Node* child : node->children){
        str += to_string(child->data)+", ";
    }
    str+= ".";
    cout<<str<<"\n";
    
    for(Node* child : node->children){
        display(child);
    }
}

Node* getTail(Node* node){
    while(node->children.size() == 1){
        node = node ->children[0];
    }
    return node;
}
//time complexity = O(n*n)
void linearize(Node* node) {
    for (Node* child: node->children) {
        linearize(child);
    }
    
    while(node->children.size()>1){
        Node* lc = node->children[node->children.size()-1]; // lc = last child
        node->children.pop_back();
        Node* sc = node->children[node->children.size()-1];  // sc = second last child
        Node* slt = getTail(sc);   // slt = second last tail
        slt->children.push_back(lc);
    }
}
//time complexity = O(n)
Node* linearize2(Node* node) {
    if(node->children.size()==0){
        return node;
    }
    
    Node* lkt = linearize2(node->children[node->children.size()-1]);
    while(node->children.size()>1){
        Node* last = node->children[node->children.size()-1]; // lc = last child
        node->children.pop_back();
        Node* sl = node->children[node->children.size()-1];  // sc = second last child
        Node* slkt = linearize2(sl);   // slt = second last tail
        slkt->children.push_back(last);
    }
    return lkt;
}

int main(){
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    Node* root = NULL;
    stack<Node*> st ;
    
    for(int i=0;i<n;i++){
        if(arr[i]==-1){
            st.pop();
        }else{
            Node* t= new Node();
            t->data = arr[i];
            
            if(st.size()>0){
                st.top()->children.push_back(t);
            }else{
                root = t;
            }
            
            st.push(t);
        }
}
   // linearize(root);
   linearize2(root);
    display(root);
    
    return 0;
}
