Question:-
https://www.pepcoding.com/resources/online-java-foundation/binary-tree/iterative-pre-post-in-binary-tree-official/ojquestion

Code:-

#include<bits/stdc++.h>
#include <sstream>

using namespace std;
class Node {
    public:
    int data;
    Node * left;
    Node * right;

    Node(int data, Node * left, Node * right) {
        this-> data = data;
        this-> left = left;
        this -> right = right;
    }
};

class Pair {
    public:
        Node * node;
    int state;

    Pair(Node * node, int state) {
        this -> node = node;
        this -> state = state;
    }
};

Node * construct(int arr[]) {
    Node * root = new Node(arr[0], NULL, NULL);
    Pair * rtp = new Pair(root, 1);

    stack < Pair * > st;
    st.push(rtp);

    int idx = 0;
    while (st.size() > 0) {
        Pair * peek = st.top();
        if (peek -> state == 1) {
            idx++;
            if (arr[idx] != INT_MAX) {
                peek -> node -> left = new Node(arr[idx], NULL, NULL);
                Pair * lp = new Pair(peek -> node -> left, 1);
                st.push(lp);
            } else {
                peek -> node -> left = NULL;
            }

            peek -> state++;
        } else if (peek -> state == 2) {
            idx++;
            if (arr[idx] != INT_MAX) {
                peek -> node -> right = new Node(arr[idx], NULL, NULL);
                Pair * rp = new Pair(peek -> node -> right, 1);
                st.push(rp);
            } else {
                peek -> node -> right = NULL;
            }

            peek -> state++;
        } else {
            st.pop();
        }
    }

    return root;
}


void PreInPostOrderIterativetraversalPrint(Node* node){
    stack<Pair*>st;
    Pair* rtp = new Pair(node,1);
    st.push(rtp);
    
    string pre ="";
    string in = "";
    string post = "";
    
    while(st.size()>0){
        Pair* peek = st.top();
        if(peek->state == 1){
            // pre , state++  , left
            pre +=to_string( peek->node->data )+ " ";
            peek->state++;
            
            if(peek->node->left != NULL){
                Pair* lp = new Pair(peek->node->left,1);
                st.push(lp);
            }
            
        }else if(peek->state == 2){
            // in , state++ , right
            in+= to_string(peek->node->data) +" ";
            peek->state++;
            
            if(peek->node->right != NULL){
                Pair* rp = new Pair(peek->node->right,1);
                st.push(rp);
            }
        }else{
            // post , pop
            post += to_string(peek->node->data) + " ";
            st.pop();
        }
    }
    
    cout<<pre<<"\n"<<in<<"\n"<<post<<"\n";
}

int main(){

    int num;
    cin >> num;
    string a[num];
    int arr[num];
    string str;
    for(int i=0;i<num;i++){
        cin>>str;
        a[i]=str;
    
    }
   for(int i=0;i<num;i++){
      if (a[i]=="n") {
            arr[i] = INT_MAX;
        } else {
            istringstream sv(a[i]);
            int val;
            sv>>val;
            arr[i] = val;
        }  
   }    
        Node* root = construct(arr);
        PreInPostOrderIterativetraversalPrint(root); // levelorder traversal
    return 0;
}
