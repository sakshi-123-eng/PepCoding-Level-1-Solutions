Question:-
https://www.pepcoding.com/resources/online-java-foundation/graphs/mutilsovler-graph-official/ojquestion

Code:-

#include<bits/stdc++.h>
using namespace std;

class Edge{
    public:
    int src;
    int nbr;
    int wt;
    
    Edge(int src , int nbr , int wt){
        this->src = src;
        this->nbr = nbr;
        this->wt = wt;
    }
    
};

class Pair{
    public:
    int sum ;
    string psf;
    
    Pair(int sum , string psf){
        this->sum = sum;
        this->psf = psf;
    }
};

int maxTotalWt = INT_MIN;
int minTotalWt = INT_MAX;
string maxPath ;
string minPath ;

int ceilPathWt = INT_MAX;
int floorPathWt = INT_MIN;
string cpath ;
string fpath ;

auto cmp = [](Pair* a, Pair* b) { return a->sum > b->sum; };
priority_queue<Pair*,vector<Pair*>,decltype(cmp)>pq(cmp);

void printAllpaths(vector<Edge*>graph[], int src , int dest , bool visited[],int C , int k , string psf , int sum){
    if(src == dest){
        if(maxTotalWt<sum){
            maxTotalWt = sum ;
            maxPath  = psf;
        }
        if(sum<minTotalWt){
            minTotalWt = sum;
            minPath = psf;
        }
        if(sum>C && sum< ceilPathWt){
            ceilPathWt = sum;
            cpath = psf;
        }
        if(sum<C && sum> floorPathWt){
            floorPathWt = sum;
            fpath = psf;
        }
        
        if(pq.size()<k){
            pq.push(new Pair(sum,psf));
        }else{
            if(sum>pq.top()->sum){
                pq.pop();
                pq.push(new Pair(sum,psf));
            }
        }
        
        
        return;
        
    }
    visited[src]=true;
    for(Edge* edge : graph[src]){
        if(visited[edge->nbr]!=true){
        printAllpaths(graph,edge->nbr , dest ,visited,C , k , psf + to_string(edge->nbr) , sum + edge->wt);
        }
    }
    
    visited[src]=false;
}
int main(){

      int vtces,edges,C,k;
      cin>>vtces>>edges;
      vector<Edge*>graph[vtces];
      for(int i = 0; i < edges; i++){
         int v1,v2,wt;
         cin>>v1>>v2>>wt;
         graph[v1].push_back(new Edge(v1, v2, wt));
         graph[v2].push_back(new Edge(v2, v1, wt));
      }

      int src,dest;
      cin>>src>>dest;

    cin>>C;
    cin>>k;
      bool visited[vtces] ;
     for(int i=0;i< vtces;i++){
         visited[i]= false;
     }
     printAllpaths(graph,src,dest,visited,C, k , to_string(src),0);
     
      cout<<"Smallest Path = " << minPath << "@" << minTotalWt<<"\n";
      cout<<"Largest Path = " << maxPath << "@" << maxTotalWt<<"\n";
      cout<<"Just Larger Path than " << C << " = " << cpath << "@" << ceilPathWt<<"\n";
      cout<<"Just Smaller Path than " << C << " = " << fpath << "@" << floorPathWt<<"\n";
      cout<< k << "th largest path = " << pq.top()->psf << "@" << pq.top()->sum<<"\n";
    
    return 0;
}
